<?xml version="1.0"?>
<!--
 /* ====================================================================
 * 
 * The ObjectStyle Group Software License, Version 1.0 
 *
 * Copyright (c) 2006 The ObjectStyle Group 
 * and individual authors of the software.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution, if
 *    any, must include the following acknowlegement:  
 *       "This product includes software developed by the 
 *        ObjectStyle Group (http://objectstyle.org/)."
 *    Alternately, this acknowlegement may appear in the software itself,
 *    if and wherever such third-party acknowlegements normally appear.
 *
 * 4. The names "ObjectStyle Group" and "Cayenne" 
 *    must not be used to endorse or promote products derived
 *    from this software without prior written permission. For written 
 *    permission, please contact andrus@objectstyle.org.
 *
 * 5. Products derived from this software may not be called "ObjectStyle"
 *    nor may "ObjectStyle" appear in their names without prior written
 *    permission of the ObjectStyle Group.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE OBJECTSTYLE GROUP OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the ObjectStyle Group.  For more
 * information on the ObjectStyle Group, please see
 * <http://objectstyle.org/>.
 *
 */
-->

<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" xmlns:license="license"
	xmlns:maven="jelly:maven" xmlns:artifact="artifact" xmlns:util="jelly:util"
	xmlns:doc="doc" xmlns:threads="jelly:threads">

	<!-- ================================================================== -->
	<!-- L A U N C H  A N D  P I N G  A P P L I C A T I O N                 -->
	<!-- ================================================================== -->

	<goal name="wounit:launch-ping"
		description="Launch and ping an woapplication">
		<property environment="env"/>
		
		
		
		
		
		<j:set var="config" value="${pom.getProperty('applicationTestConfig')}"/>
		<j:set var="JAVA_HOME" value="${env.JAVA_HOME}"/>
		<j:set var="PATH" value="${env.JAVA_HOME}"/>
		<echo>${config}</echo>
		<j:choose>
			<j:when test="${empty(config)}">				
				<fail message="No Test Config Parameter defined in project.xml."/>
			</j:when>
		</j:choose>
		<j:choose>
			<j:when test="${empty(JAVA_HOME)}">
				<fail message ="no JAVA_HOME: ${JAVA_HOME}"/>
			
			</j:when>
			<j:otherwise>
				<echo>JAVA_HOME is ${env.JAVA_HOME}</echo>
			</j:otherwise>
		</j:choose>
		<j:choose>
			<j:when test="${empty(PATH)}">
				<fail message ="no PATH: ${PATH.length()}"/>
			
			</j:when>
			<j:otherwise>
				<echo>PATH is ${env.PATH}</echo>
			</j:otherwise>
		</j:choose>
		
		
		
		
	<!-- Finding a possible not used port -->		
	<j:new var="random" className="java.util.Random"/>
<!--	<ant:available file="../${maven.wounit.launchandping.parameter.port.value}12" property="present"/>-->
	<util:available file="../${maven.wounit.launchandping.parameter.port.value}">	
		<j:choose>
			<j:set var="present" value="true"/>
			<j:while test="${present}">
				<j:set var="maven.wounit.launchandping.parameter.port.value" value="${random.nextInt(10000)+10000}"/>
				<echo>Testing Port ${maven.wounit.launchandping.parameter.port.value} </echo>								
				<j:set var="present" value="false"/>
				<util:available file="../${maven.wounit.launchandping.parameter.port.value}">
					<j:set var="present" value="true"/>
				</util:available>
				<echo>${present}</echo>
			</j:while>
		</j:choose>	
	</util:available>
	<ant:echo message="Hier bau ich" file="../${maven.wounit.launchandping.parameter.port.value}"/>
	<echo>Using Port: ${maven.wounit.launchandping.parameter.port.value}</echo>	
		
		
		
		
		
		
<!--		timeout="${maven.wounit.launch.timeout}+10000" -->
		<threads:thread var="WOServerThread">
			<exec executable="${maven.wounit.launchscript.unix}"
				dir="${maven.wounit.launch.dir}" failonerror="true" spawn="false"
				vmlauncher="false" 
				resultproperty="maven.wounit.launch.errorcode">
				<arg
					value="${maven.wounit.launchandping.parameter.port.argument}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.port.value}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.directconnect.argument}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.directconnect.value}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.autoopeninbrowser.argument}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.autoopeninbrowser.value}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.displayexceptionpages.argument}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.displayexceptionpages.value}"/>
				<arg
					value="${maven.wounit.launchandping.parameter.testsystem}"/>
				<arg
					value="${config}"/>
				<env key="JAVA_HOME" value="$env.JAVA_HOME"/>
				<env key="PATH" path="${env.JAVA_HOME}/bin:${env.PATH}"/>
			</exec>
			
		</threads:thread>
		<echo>Waiting for Application to start</echo>		
    	<ant:waitfor maxwait="${maven.wounit.launch.timeout}"
			maxwaitunit="millisecond" checkevery="15" checkeveryunit="second"
			timeoutproperty="maven.wounit.ping.failed">
			<or>
				<ant:http
					url="http://localhost:${maven.wounit.launchandping.parameter.port.value}/"
					errorsBeginAt="400"/>
				<isset 	property="maven.wounit.launch.errorcode"/>
			</or>
		</ant:waitfor>	
		
		<ant:delete file="../${maven.wounit.launchandping.parameter.port.value}" verbose="true"/>
		
					
		<ant:condition property="isset_errorcode" else="false">						
			<ant:isset property="maven.wounit.launch.errorcode"/>
		</ant:condition>
		<ant:condition property="maven.wounit.ping.failed" else="false">						
			<ant:isset property="maven.wounit.ping.failed"/>
		</ant:condition>		
      	<j:choose>
	  	 	<j:when  test="${!maven.wounit.ping.failed and isset_errorcode and maven.wounit.launch.errorcode!=0}">	  	 	
			    <fail message="could not start the application: ErrorCode: ${maven.wounit.launch.errorcode}"/>
	  	 	</j:when>
      	    <j:when  test="${maven.wounit.ping.failed}">
			    <fail message="could not ping the application: http://localhost:${maven.wounit.launchandping.parameter.port.value}"/>
	  	 	</j:when>
	  	 	<j:otherwise>
	  	 		<echo>Application startet and pinged on Port ${maven.wounit.launchandping.port}</echo>
	  	 	</j:otherwise>
 		</j:choose>
 		<threads:interrupt thread="${WOServerThread}"/>
 		
 		
	</goal>
</project>