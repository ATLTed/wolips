<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE templates [
	<!ELEMENT templates (template)*>
	<!ELEMENT template (#PCDATA)>
	<!ATTLIST template
	name CDATA #REQUIRED
		id ID #REQUIRED
		description CDATA #IMPLIED
		variables CDATA #IMPLIED
		enabled (true | false) #REQUIRED
>
]>
<templates>
	<template name="webobjects html template" id="html" description="html file with body" variables="PLUGIN_NAME" enabled="true"><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
	<HEAD>
		<META NAME="generator" CONTENT="${PLUGIN_NAME}">
		<TITLE>Untitled</TITLE>
	</HEAD>
	<BODY BGCOLOR=#FFFFFF>
	</BODY>
</HTML>]]></template>
	<template name="webobjects wod template" id="wod" description="empty wod file" enabled="true"/>
	<template name="webobjects woo template" id="woo" description="woo file" enabled="true"><![CDATA[{
"WebObjects Release" = "WebObjects 5.1"; 
encoding = NSMacOSRomanStringEncoding; 
}]]></template>
	<template name="webobjects api template" id="api" description="api file" variables="CLASS" enabled="true"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<wodefinitions>
        <wo wocomponentcontent="false" class="${CLASS}">

        </wo>
</wodefinitions>]]></template>
	<template name="webobjects java component template" id="wocomponent" description="wocomponent subclass " variables="PLUGIN_NAME,DATE,CLASS" enabled="true"><![CDATA[// Generated by the ${PLUGIN_NAME} at ${DATE}

import com.webobjects.appserver.*;

public class ${CLASS} extends WOComponent {

    public ${CLASS}(WOContext context) {
        super(context);
    }

}]]></template>
	<template name="webobjects application template" id="application" description="application java file" variables="PLUGIN_NAME" enabled="true"><![CDATA[// Generated by the ${PLUGIN_NAME}

import com.webobjects.appserver.WOApplication;
import com.webobjects.foundation.NSLog;

public class Application extends WOApplication {
    
    public static void main(String argv[]) {
        WOApplication.main(argv, Application.class);
    }

    public Application() {
        super();
        NSLog.out.appendln("Welcome to " + this.name() + " !");
        /* ** put your initialization code in here ** */
    }
}]]></template>
	<template name="webobjects session template" id="session" description="session java file" variables="PLUGIN_NAME" enabled="true"><![CDATA[// Generated by the ${PLUGIN_NAME}

import com.webobjects.appserver.WOSession;

public class Session extends WOSession {
}]]></template>
	<template name="webobjects direct action template" id="directAction" description="direct action java file" variables="PLUGIN_NAME" enabled="true"><![CDATA[// Generated by the ${PLUGIN_NAME}

import com.webobjects.appserver.*;

public class DirectAction extends WODirectAction {

    public DirectAction(WORequest aRequest) {
        super(aRequest);
    }

    public WOActionResults defaultAction() {
        return pageWithName("Main");
    }

}]]></template>
	<template name="webobjects application project file" id="applicationproject" description="basic project file with main component and application class" variables="PROJECT_NAME" enabled="true"><![CDATA[{
    DYNAMIC_CODE_GEN = YES;
    FRAMEWORKSEARCH = ("$(NEXT_ROOT)$(LOCAL_LIBRARY_DIR)/Frameworks");  
    FILESTABLE = {
        CLASSES = ( ); 
        FRAMEWORKS = ( ); 
        OTHER_LINKED = (); 
        OTHER_SOURCES = (
            Makefile.preamble, 
            Makefile, 
            Makefile.postamble, 
            CustomInfo.plist 
        ); 
        WOAPP_RESOURCES = (
            Properties
        ); 
        WO_COMPONENTS = ( ); 
    }; 
    LANGUAGE = English; 
    LOCALIZABLE_FILES = {}; 
    MAKEFILEDIR = "$(MAKEFILEPATH)/java_makefiles"; 
    NEXTSTEP_BUILDTOOL = /bin/gnumake; 
    NEXTSTEP_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/WebObjects/Applications"; 
    NEXTSTEP_JAVA_COMPILER = /usr/bin/javac; 
    NEXTSTEP_OBJCPLUS_COMPILER = /usr/bin/cc; 
    PBPROJECTTYPEVERSION = 4.0; 
    PDO_UNIX_BUILDTOOL = $NEXT_ROOT/Developer/bin/make; 
    PDO_UNIX_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/WebObjects/Applications"; 
    PDO_UNIX_JAVA_COMPILER = "$(JDKBINDIR)/javac"; 
    PDO_UNIX_OBJCPLUS_COMPILER = "$(NEXTDEV_BIN)/gcc";
    PROJECTNAME = ${PROJECT_NAME}; 
    PROJECTTYPE = JavaWebObjectsApplication; 
    PROJECTVERSION = 2.8; 
    WINDOWS_BUILDTOOL = $NEXT_ROOT/Developer/Executables/make; 
    WINDOWS_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/WebObjects/Applications"; 
    WINDOWS_JAVA_COMPILER = "$(JDKBINDIR)/javac.exe"; 
    WINDOWS_OBJCPLUS_COMPILER = "$(DEVDIR)/gcc"; 
}
]]></template>
	<template name="webobjects framework project file" id="frameworkproject" description="basic project file with main component and application class" variables="PROJECT_NAME" enabled="true"><![CDATA[{
    CURRENTLY_ACTIVE_VERSION = YES; 
    DEPLOY_WITH_VERSION_NAME = A; 
    DYNAMIC_CODE_GEN = YES; 
    FRAMEWORKSEARCH = ("$(NEXT_ROOT)$(LOCAL_LIBRARY_DIR)/Frameworks"); 
    FILESTABLE = {
        FRAMEWORKS = ( ); 
        OTHER_SOURCES = (
            CustomInfo.plist, 
            java.template, 
            Makefile, 
            Makefile.postamble, 
            Makefile.preamble
        ); 
        SUBPROJECTS = (); 
        WOAPP_RESOURCES = (); 
        WO_COMPONENTS = (); 
    }; 
    LANGUAGE = English; 
    MAKEFILEDIR = "$(MAKEFILEPATH)/java_makefiles"; 
    NEXTSTEP_BUILDTOOL = /bin/gnumake; 
    NEXTSTEP_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/Frameworks"; 
    NEXTSTEP_JAVA_COMPILER = /usr/bin/javac; 
    NEXTSTEP_OBJCPLUS_COMPILER = /usr/bin/cc; 
    PBPROJECTTYPEVERSION = 4.0; 
    PDO_UNIX_BUILDTOOL = $NEXT_ROOT/Developer/bin/make; 
    PDO_UNIX_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/Frameworks"; 
    PDO_UNIX_JAVA_COMPILER = "$(JDKBINDIR)/javac"; 
    PDO_UNIX_OBJCPLUS_COMPILER = "$(NEXTDEV_BIN)/gcc"; 
    PROJECTNAME = ${PROJECT_NAME};
    PROJECTTYPE = JavaWebObjectsFramework; 
    PROJECTVERSION = 2.8; 
    WINDOWS_BUILDTOOL = $NEXT_ROOT/Developer/Executables/make; 
    WINDOWS_INSTALLDIR = "$(LOCAL_LIBRARY_DIR)/Frameworks"; 
    WINDOWS_JAVA_COMPILER = "$(JDKBINDIR)/javac.exe"; 
    WINDOWS_OBJCPLUS_COMPILER = "$(DEVDIR)/gcc"; 
}
]]></template>
	<template name="webobjects subproject file " id="subproject" description="basic subproject file" variables="PROJECT_NAME" enabled="true"><![CDATA[{
    DYNAMIC_CODE_GEN = YES; 
    English_RESOURCES = {}; 
    FILESTABLE = {
        CLASSES = (  ); 
        OTHER_LINKED = (); 
        OTHER_SOURCES = (); 
        SUBPROJECTS = (); 
        WOAPP_RESOURCES = ( ); 
        WO_COMPONENTS = ( );  
    }; 
    LANGUAGE = English; 
    PROJECTNAME = ${PROJECT_NAME}; 
    PROJECTTYPE = JavaWebObjectsSubproject; 
    PROJECTVERSION = 2.8; 
}]]></template>
	<template name="project info plist" id="project.plist" variables="PROJECT_NAME" enabled="true"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<plist version="0.9">
<dict>
        <key>NSExecutable</key>
        <string>${PROJECT_NAME}</string>
        <key>CFBundlePackageType</key>
	 <string>APPL</string>
</dict>
</plist>]]></template>
	<template name="ant file woapplication" id="woapplication.ant.build" variables="PROJECT_NAME" enabled="true"><![CDATA[<project name="${PROJECT_NAME}" default="build" basedir=".">

	<!-- main targets  -->
	<!-- add optional targets to depends list if needed -->
	<target name="build" depends="setProps,init.build,build.woapp"/>

	<target name="install" depends="setProps,init.install,build.woapp"/>
	
	<target name="clean" depends="setProps">
	  	<delete dir="${project.name}.woa"/>
	</target>

	<!-- property determination  -->
	<target name="setProps">
		<property file="build.properties"/>
		<property file="${user.home}${file.separator}Library${file.separator}wobuild.properties"/>
		<condition property="wo.properties.check.failed">
			<not>
    			<and>
      				<isset property="wo.wosystemroot"/>
      				<isset property="wo.wolocalroot"/>
    			</and>
    		</not>
  		</condition>
  		<fail message="Could not find ${user.home}${file.separator}Library${file.separator}wobuild.properties." if="wo.properties.check.failed"/>
		<property name="install.dir" value="${wo.wolocalroot}/Library/Webobjects/Applications"/>
	</target>
		
	<!-- basic initializations  -->
	<target name="init.install">
		 <tstamp/>
		<property name="dest.dir" value="${install.dir}"/>
	</target>
	
	<target name="init.build">
	 	<tstamp/>
		<property name="dest.dir" value="."/>
	</target>
	
	<!-- woproject tasks -->
	<target name="build.woapp">
		<woapplication name="${project.name}"  stdFrameworks="false" destDir="${dest.dir}">
   			<classes dir="${classes.dir}">
   			</classes>
   			<wsresources dir=".">
   				<include name="addYourWebServerResourcesHere"/>
				<exclude name="**/*.woa/**"/>
			</wsresources>
   			<resources dir=".">
				<include name="Properties"/>
   				<include name="**/*.eomodeld/"/>
   				<include name="**/*.d2wmodel"/>
       			<include name="**/*.wo/"/>
       			<include name="**/*.api"/>
       			<include name="**/*.strings"/>
       			<exclude name="**/*.eomodeld~/"/>
       			<exclude name="**/*.woa/**"/>
       		</resources>
			<frameworks root="${wo.wosystemroot}">
      				<patternset>
  					<includesfile name="ant.frameworks.wo.wosystemroot"/> 
				</patternset>
   			</frameworks>
   			<frameworks root="${wo.wolocalroot}">
      				<patternset>
  					<includesfile name="ant.frameworks.wo.wolocalroot"/> 
				</patternset>
   			</frameworks>
			<frameworks root="${user.home}">
      				<patternset>
  					<includesfile name="ant.frameworks.user.home"/> 
				</patternset>
   			</frameworks>
			<otherclasspath root="${wo.wosystemroot}">
   				<patternset>
  					<includesfile name="ant.classpaths.wo.wosystemroot"/> 
				</patternset>
			</otherclasspath>
			<lib dir=".">
				<include name="Add .jar's that should be copied in the woa."/>
				<exclude name="**/*.woa/**"/>
			</lib>
   		</woapplication>
	</target>

	<!-- optional targets -->
	<!-- copy strings files -->	
	<target name="copy.strings">
   		 <copy todir="${dest.dir}/${project.name}.woa/Contents/Resources">
       			<fileset dir="." casesensitive="yes">
				<include name="*.strings"/>
        			<include name="**/*.strings"/>
    			</fileset>
         		<mapper type="flatten"/>
     		</copy>
 	</target>

</project>]]></template>
	<template name="ant properties woapplication" id="woapplication.ant.properties" variables="BUILD_DIR,PROJECT_NAME,NEXT_ROOT" enabled="true"><![CDATA[
classes.dir = ${BUILD_DIR}
project.name = ${PROJECT_NAME}
]]></template>
	<template name="ant file woframework" id="woframework.ant.build" variables="PROJECT_NAME" enabled="true"><![CDATA[<project name="${PROJECT_NAME}" default="build" basedir=".">

	<!-- main targets  -->
	<!-- add optional targets to depends list if needed -->
	<target name="build" depends="setProps,init.build,build.woframework"/>

	<target name="install" depends="setProps,init.install,build.woframework"/>
	    
	<target name="clean" depends="setProps">
	  	<delete dir="${framework.name}.framework"/>
	</target>

	<!-- property determination  -->
	<target name="setProps">
		<property file="build.properties"/>
		<property file="${user.home}${file.separator}Library${file.separator}wobuild.properties"/>
		<condition property="wo.properties.check.failed">
			<not>
    			<and>
      				<isset property="wo.wosystemroot"/>
      				<isset property="wo.wolocalroot"/>
    			</and>
    		</not>
  		</condition>
  		<fail message="Could not find ${user.home}${file.separator}Library${file.separator}wobuild.properties." if="wo.properties.check.failed"/>
		<property name="install.dir" value="${wo.wolocalroot}/Library/Frameworks"/>
	</target>

	<!-- basic initializations  -->
	<target name="init.install">
		 <tstamp/>
		<property name="dest.dir" value="${install.dir}"/>
	</target>
	
	<target name="init.build">
		 <tstamp/>
		<property name="dest.dir" value="."/>
	</target>

	<!-- woproject tasks -->
	<target name="build.woframework">	
		<woframework name="${framework.name}" destDir="${dest.dir}">
   			<classes dir="${classes.dir}">
   			</classes>
   			<wsresources dir=".">
   				<include name="addYourWebServerResourcesHere"/>
				<exclude name="**/*.framework/**"/>
			</wsresources>
   			<resources dir=".">
				<include name="Properties"/>
       			<include name="**/*.eomodeld/"/>
       			<include name="**/*.d2wmodel"/>
       			<include name="**/*.wo/"/>
				<include name="**/*.api"/>
				<include name="**/*.strings"/>
				<exclude name="**/*.eomodeld~/"/>
				<exclude name="**/*.framework/**"/>
   			</resources>
   			<lib dir=".">
				<include name="Add .jar's that should be copied in the framework."/>
				<exclude name="**/*.woa/**"/>
			</lib>
   		</woframework>
	</target>
		
	<!-- optional targets -->
	<!-- copy strings files -->	
	<target name="copy.strings">
   		 <copy todir="${dest.dir}/${framework.name}.framework/Resources">
       		<fileset dir="." casesensitive="yes">
				<include name="*.strings"/>
        			<include name="**/*.strings"/>
    			</fileset>
         		<mapper type="flatten"/>
     		</copy>
 	</target>

</project>]]></template>
	<template name="ant properties woframework" id="woframework.ant.properties" variables="BUILD_DIR,PROJECT_NAME" enabled="true"><![CDATA[
classes.dir =  ${BUILD_DIR}
framework.name = ${PROJECT_NAME}
]]></template>
	<template name="ant helper" id="ant.helper" enabled="true"><![CDATA[<?xml version="1.0"?>
<!-- temporary help file to copy subproject resources -->
<project name="${project.name}" default="copy.resources" basedir=".">

	<property file="build.properties"/>
	
	<target name="copy.resources.framework" depends="setFrameworkDir,copy.resources"/>
	<target name="copy.resources.application" depends="setApplicationDir,copy.resources"/>
	
	
	<target name="setFrameworkDir">
		<property name="toDir" value="${dest.dir}/${framework.name}.framework/Resources"/>
	</target>
	
	<target name="setApplicationDir">
		<property name="toDir" value="${dest.dir}/${project.name}.woa/Contents/Resources"/>
	</target>

	
	<target name="copy.resources">
	
		<!-- copy api files (all) -->
 		<copy todir="${toDir}">
    			<fileset dir="." casesensitive="yes">
   				<include name="**/*.api"/>
			</fileset>
      		<mapper type="flatten"/>
  		</copy>
  		
  		<!-- copy wo components (windows) -->
  		<copy todir="${toDir}">
    			<fileset dir="." casesensitive="yes">
   				<include name="**/*.wo/"/>
			</fileset>
      		<mapper type="regexp" from="^(.*)\\(.*\.wo)\\(.*\..+)$$" to="\2/\3"/>
  		</copy>
		<!-- copy wo components (mac/unix) -->
		<copy todir="${toDir}">
    			<fileset dir="." casesensitive="yes">
   				<include name="**/*.wo/"/>
			</fileset>
      		<mapper type="regexp" from="^(.*)/(.*\.wo)/(.*\..+)$$" to="\2/\3"/>
  		</copy>
  		
  		<!-- copy eomodels (windows) -->
  		<copy todir="${toDir}">
    			<fileset dir="." casesensitive="yes">
   				<include name="**/*.eomodeld/"/>
			</fileset>
      		<mapper type="regexp" from="^(.*)\\(.*\.eomodeld)\\(.*)$$" to="\2/\3"/>
  		</copy>
		<!-- copy eomodels (mac/unix) -->
  		<copy todir="${toDir}">
    			<fileset dir="." casesensitive="yes">
   				<include name="**/*.eomodeld/"/>
			</fileset>
      		<mapper type="regexp" from="^(.*)/(.*\.eomodeld)/(.*)$$" to="\2/\3"/>
  		</copy>
  		
	</target>

</project>]]></template>
	<template name="webobjects properties template" id="properties" description="empty property file" enabled="true"><![CDATA[
	]]></template>
	<template name="webobjects woapplication makefile" id="woapplication.makefile" description="basic make file with main component and application class" variables="PROJECT_NAME" enabled="true"><![CDATA[
#
# Generated by the Apple Project Builder.
#
# NOTE: Do NOT change this file -- Project Builder maintains it.
#
# Put all of your customizations in files called Makefile.preamble
# and Makefile.postamble (both optional), and Makefile will include them.
#

NAME = ${PROJECT_NAME}

PROJECTVERSION = 2.8
PROJECT_TYPE = JavaWebObjectsApplication

GLOBAL_RESOURCES = Main.wo Main.api

JAVA_CLASSES = src/Application.java src/DirectAction.java src/Main.java\
               src/Session.java

OTHERSRCS = CustomInfo.plist EOJavaClass.template java.template\
            Makefile Makefile.postamble Makefile.preamble


MAKEFILEDIR = $(MAKEFILEPATH)/java_makefiles
CODE_GEN_STYLE = DYNAMIC
MAKEFILE = woapp.make
NEXTSTEP_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/WebObjects/Applications
WINDOWS_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/WebObjects/Applications
PDO_UNIX_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/WebObjects/Applications
LIBS = 
DEBUG_LIBS = $(LIBS)
PROF_LIBS = $(LIBS)


FRAMEWORKS = -framework JavaEOAccess -framework JavaEOControl\
             -framework JavaFoundation -framework JavaJDBCAdaptor\
             -framework JavaWebObjects -framework JavaWOExtensions\
             -framework JavaXML



JAVA_USED = YES

NEXTSTEP_OBJCPLUS_COMPILER = /usr/bin/cc
WINDOWS_OBJCPLUS_COMPILER = $(DEVDIR)/gcc
PDO_UNIX_OBJCPLUS_COMPILER = $(NEXTDEV_BIN)/gcc
NEXTSTEP_JAVA_COMPILER = /usr/bin/javac
WINDOWS_JAVA_COMPILER = $(JDKBINDIR)/javac.exe
PDO_UNIX_JAVA_COMPILER = $(JDKBINDIR)/javac

include $(MAKEFILEDIR)/platform.make

-include Makefile.preamble

include $(MAKEFILEDIR)/$(MAKEFILE)

-include Makefile.postamble

-include Makefile.dependencies
]]></template>
	<template name="webobjects woapplication makefile preamble" id="woapplication.makefile.preamble" description="basic make.preamble" enabled="true"><![CDATA[
###############################################################################
#  Apple Makefile.preamble
#  Copyright 2001, Apple Computer, Inc.
#
#  Use this makefile for configuring the standard application makefiles 
#  associated with ProjectBuilderWO.  It is included before the main makefile.
#  In Makefile.preamble you set attributes for a project, so they are available
#  to the project's makefiles.
#
#  In contrast, you typically write additional rules or override built-in 
#  behavior in the Makefile.postamble.  You should not put additional rules
#  in the preamble.
#  
#  Each directory in a project tree (main project plus subprojects) should 
#  have its own Makefile.preamble and Makefile.postamble.
#
###############################################################################
#
# Variable controlling characteristics of the make build system: 
#
#     MAKEFILEDIR: Directory in which to find $(MAKEFILE)
#     MAKEFILE: Top level mechanism Makefile (e.g., app.make, bundle.make)
#
#     OTHER_RECURSIVE_VARIABLES: The names of variables which you want to be
#         passed on the command line to recursive invocations of make.  Note that
# 	      the values in OTHER_*FLAGS are inherited by subprojects automatically --
#	      you do not have to (and shouldn't) add OTHER_*FLAGS to 
#	      OTHER_RECURSIVE_VARIABLES. 
#

#
# These variables provide hooks enabling you to add behavior at almost every 
# stage of the make:
#
#     BEFORE_PREBUILD: targets to build before installing headers for a subproject
#     AFTER_PREBUILD: targets to build after installing headers for a subproject
#     BEFORE_BUILD_RECURSION: targets to make before building subprojects
#     BEFORE_BUILD: targets to make before a build, but after subprojects
#     AFTER_BUILD: targets to make after a build
#
#     BEFORE_COPY_JAVA_CLASSES: targets to make prior to jar'ing the generated .class files
#     AFTER_COPY_JAVA_CLASSES: targets to make after jar'ing the generated .class files
#
#     BEFORE_INSTALL: targets to build before installing the product
#     AFTER_INSTALL: targets to build after installing the product
#     BEFORE_POSTINSTALL: targets to build before postinstalling every subproject
#     AFTER_POSTINSTALL: targts to build after postinstalling every subproject
#
#     BEFORE_INSTALLSRC: targets to build before installing source for a subproject
#     AFTER_INSTALLSRC: targets to build after installing source for a subproject
#

#
# Project dependency variables:
#     OTHER_PRODUCT_DEPENDS: Other dependencies of this project
#     OTHER_INITIAL_TARGETS: Built *before* building subprojects/bundles
#     OTHER_SOURCEFILES: Other source files maintained by .pre/postamble
#     OTHER_RESOURCES: Additional (non-localized) resources for this project, 
#         which can be generated
#     OTHER_GARBAGE: Additional files to be removed by `make clean' 
#

#
# Variables which control the file compilation:
#     OTHER_JAVATOOL_FLAGS: Pass flags to the 'javatool' compilation utility.
#         Flags which javatool doesn't recognize are passed down to the java compiler.
#
#     ARCHIVE_JAVA_CLASSES: Set to YES (the default) or NO.  Set it to NO to
#         turn off Java archiving (which is either jar, if available on your system, or zip).
#     JAVA_ARCHIVE_METHOD: Set to JAR to archive Java classes using Java archiving.  Set
#         to ZIP to archive them using zip compression.
#
#     JAVA_IS_SERVER_SIDE, JAVA_IS_CLIENT_SIDE: Set one, or both, of these flags to
#         NO to turn off building for server-side or client-side java.  Default is YES. 
#         Setting both to YES will build all files for both side (use this when building
#         java classes common to both client and server side)
JAVA_IS_SERVER_SIDE = YES
JAVA_IS_CLIENT_SIDE = NO
#
#     OTHER_CLASSPATH, OTHER_CLASSPATH_CLIENT: Use these to add additional Java classpaths for
#         the client and server sides (respectively) so generated classpath for Java in frameworks.
#         NOTE: Delimit your class path elements with $(CLASSPATH_DELIMITER) so they'll be
#         platform independent.
#     DEV_STYLE_CLASSPATH: Normally, when generating the run-time classpath file the build
#         system fixes the paths to the frameworks in the classpath to reflect the normal,
#         installed locations of those frameworks.  By setting this variable to
#         YES, this 'fixing' process will be turned off.
#

#
# Project-wide settings:
#     BUNDLE_PACKAGE_TYPE: The type of package being built.  Defaults to "APPL".
#     BUNDLE_SIGNATURE: The specific identifier of the built package.  Defaults to "webo".
#     ICON_FILE: The file to display in the Mac OS X Finder for the compiled application.
#         This icon must be in your Resources directory.  Defaults to "WOAfile.icns",
#         which is included in the Java WebObjects Application project template.
#

#
# Variables that only apply to the JavaWebObjectsApplication project type:
#
# The values for these variables are written into comments in the
# classpath file for each platform WebObjects supports.  When the 
# application starts up, the launch scripts read these commented
# values and configures the specific command line used to launch the
# application accordingly.
#
# These classpath files are installed into the application directory,
# for example, "MyApp.woa".
#
# If you want to customize these values for the individual platforms,
# edit the corresponding commented values in the classpath file for
# the platform.  Make sure the values in the classpath files remain commented 
# when you alter them or the launch scripts will interpret them as part of
# the classpath.
#
#     JAVA_VM: This variable controls the name of the Java virtual machine within
#         which the application will run and defaults to "java". Uncomment this
#         variable and change its value to choose a different virtual machine.
#JAVA_VM = java
#
#     JAVA_DEBUGGER: This variable controls the name of the Java Debugger the
#         application will use and defaults to "jdb". Uncomment the variable and
#         change its value to choose a different debugger.
#JAVA_DEBUGGER = jdb
#
#     JVM_OPTIONS, JDB_OPTIONS: These variables define arguments passed to the
#         Java VM or Java debugger when a WO application is launched.
#JVM_OPTIONS =
#JDB_OPTIONS =
#
#     WOAPPLICATION_CLASS_NAME variable defines the name of the application's
#         Java class and defaults to "Application". Uncomment the variable and 
#         change its value to choose a different application class name.
#WOAPPLICATION_CLASS_NAME = Application
#

#
# Variables used for JSP and Servlet integration. In order for JSP and Servlet
# integration to work, the JavaWOJSPServlet framework must be added. All of these 
# variables should be exported for use in the JSP/Servlet packaging script.
# 
# If the JavaWOJSPServlet framework is added, a war archive will be created for JSP 
# or Servlet deployment.
# 
#     SERVLET_APP_MODE variable defines where WebserverResources will be loaded from.
#          If set to Deployment, WebserverResources will be loaded from the container or 
#          the webserver as appropriate. Otherwise (the default), they will be loaded
#          from inside the woa.
# export SERVLET_APP_MODE = Deployment
#
#     SERVLET_WEBAPPS_DIR variable defines the location to create the war archive
#          for this application. $(DSTROOT) can be used as part of the definition.
# export SERVLET_WEBAPPS_DIR = 
#
#     SERVLET_COPY_JARS variable copies all included framework and application jars to
#          the lib directory of the WEB-INF of the war. This could potentially be
#          slow, and large (several megabytes), so only set this if you are going to 
#          be using WebObjects classes directly from your JSP page or Servlet.
# export SERVLET_COPY_JARS = YES
#

#
# Variables used when installing the final product:
#     OTHER_INSTALL_DEPENDS: Targets to build before installation
#
#     INSTALL_AS_USER: owner of the intalled products (default is 'root')
#     INSTALL_AS_GROUP: group of the installed products (default is 'wheel')
#     INSTALL_PERMISSIONS: permissions of the installed product (default is 'o+rX')
#
#     INSTALLDIR_WEBSERVER: The installation Directory.  Typically, this value is
#         set to $(WEBSERVER_DOCROOT)/WebObjects (uncomment the line below to use
#         this default value).
#         Note: WEBSERVER_DOCROOT is computed from:
#             $(NEXT_ROOT)/$(SYSTEM_LIBRARY_DIR)/Frameworks/JavaWebObjects.framework/Resources/WebServerConfig.plist
#         which is created during installation.
#INSTALLDIR_WEBSERVER = $(WEBSERVER_DOCROOT)/WebObjects
#
#     DSTROOT: This variable's value is prefixed to the directory where a product
#         (application or framework) is installed. Developers wishing to install
#         their product into a location other than under $(NEXT_ROOT) should modify
#         the line below. An empty DSTROOT is legal; NEXT_ROOT defaults to "C:/Apple"
#         on Windows systems and "" on other systems.
DSTROOT = $(NEXT_ROOT)
#
]]></template>
	<template name="webobjects woapplication makefile postamble" id="woapplication.makefile.postamble" description="basic makefile.postamble" enabled="true"><![CDATA[
###############################################################################
#  Apple Makefile.postamble
#  Copyright 2001, Apple Computer, Inc.
#
#  Use this makefile, which is imported after all other makefiles, to
#  override attributes for a project's Makefile environment. This allows you  
#  to take advantage of the environment set up by the other Makefiles. 
#  You can also define custom rules at the end of this file.
#  
#  Each directory in a project tree (main project plus subprojects) should 
#  have its own Makefile.preamble and Makefile.postamble.
#
###############################################################################
# 
# Variables exported by the common makefiles that can be used in any
# customizations you make to the template below:
#
#     PRODUCTS: products to install.  All of these products will be placed in
#         the directory $(DSTROOT)$(INSTALLDIR)
#	  PRODUCT_ROOT: Name of the directory to which resources are copied.
#     GLOBAL_RESOURCE_DIR: The directory to which resources are copied.
#     LOCAL_RESOURCE_DIR: The directory to which localized resources are copied.
#	  DERIVED_SRC_DIR: Directory used for all other derived files
#
#	  NAME: name of application, bundle, subproject, palette, etc.
#	  LANGUAGES: Langage in which the project is written (default "English")
#	  GLOBAL_RESOURCES: Non-localized resources of project
#
#	  CLASSES: Class implementation files in project.
#	  SUBPROJECTS: Subprojects of this project
#	  OTHERSRCS: Other miscellaneous sources of this project
#	  OTHERLINKED: Source files not matching a standard source extention
#
#     SRCROOT: Base directory in which to place the new source files
#     SRCPATH: Relative path from SRCROOT to present subdirectory
#
#	  INSTALLDIR: Directory app will be installed into by 'install' target
#
#     EXECUTABLE_EXT: Executable extension for the platform (i.e. .exe on Windows)
#

#
# Put additional rules to extend the behavior of the standard Makefiles below.
# Include them in the dependency tree using the variables listed in the
# Makefile.preamble.
#
# You should avoid redefining things like "install" or "app", as they are
# owned by the top-level Makefile API and no context has been set up for where 
# derived files should go.
#
]]></template>
	<template name="webobjects woframework makefile" id="woframework.makefile" description="basic make file" variables="PROJECT_NAME" enabled="true"><![CDATA[
#
# Generated by the Apple Project Builder.
#
# NOTE: Do NOT change this file -- Project Builder maintains it.
#
# Put all of your customizations in files called Makefile.preamble
# and Makefile.postamble (both optional), and Makefile will include them.
#

NAME = ${PROJECT_NAME}

PROJECTVERSION = 2.8
PROJECT_TYPE = JavaWebObjectsFramework

OTHERSRCS = CustomInfo.plist java.template Makefile Makefile.postamble\
            Makefile.preamble

MAKEFILEDIR = $(MAKEFILEPATH)/java_makefiles
CODE_GEN_STYLE = DYNAMIC
MAKEFILE = woframework.make
NEXTSTEP_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/Frameworks
WINDOWS_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/Frameworks
PDO_UNIX_INSTALLDIR = $(LOCAL_LIBRARY_DIR)/Frameworks
LIBS = 
DEBUG_LIBS = $(LIBS)
PROF_LIBS = $(LIBS)


FRAMEWORKS = -framework JavaEOAccess -framework JavaEOControl\
             -framework JavaFoundation -framework JavaWebObjects\
             -framework JavaWOExtensions -framework JavaXML


NEXTSTEP_OBJCPLUS_COMPILER = /usr/bin/cc
WINDOWS_OBJCPLUS_COMPILER = $(DEVDIR)/gcc
PDO_UNIX_OBJCPLUS_COMPILER = $(NEXTDEV_BIN)/gcc
NEXTSTEP_JAVA_COMPILER = /usr/bin/javac
WINDOWS_JAVA_COMPILER = $(JDKBINDIR)/javac.exe
PDO_UNIX_JAVA_COMPILER = $(JDKBINDIR)/javac

include $(MAKEFILEDIR)/platform.make

-include Makefile.preamble

include $(MAKEFILEDIR)/$(MAKEFILE)

-include Makefile.postamble

-include Makefile.dependencies
]]></template>
	<template name="webobjects woframework makefile preamble" id="woframework.makefile.preamble" description="basic make.preamble" enabled="true"><![CDATA[
###############################################################################
#  Apple Makefile.preamble
#  Copyright 2001, Apple Computer, Inc.
#
#  Use this makefile for configuring the standard framework makefiles 
#  associated with ProjectBuilderWO.  It is included before the main makefile.
#  In Makefile.preamble you set attributes for a project, so they are available
#  to the project's makefiles.
#
#  In contrast, you typically write additional rules or override built-in 
#  behavior in the Makefile.postamble.  You should not put additional rules
#  in the preamble.
#  
#  Each directory in a project tree (main project plus subprojects) should 
#  have its own Makefile.preamble and Makefile.postamble.
#
###############################################################################
#
# Variable controlling characteristics of the make build system: 
#
#     MAKEFILEDIR: Directory in which to find $(MAKEFILE)
#     MAKEFILE: Top level mechanism Makefile (e.g., app.make, bundle.make)
#
#     OTHER_RECURSIVE_VARIABLES: The names of variables which you want to be
#         passed on the command line to recursive invocations of make.  Note that
# 	      the values in OTHER_*FLAGS are inherited by subprojects automatically --
#	      you do not have to (and shouldn't) add OTHER_*FLAGS to 
#	      OTHER_RECURSIVE_VARIABLES. 
#

#
# These variables provide hooks enabling you to add behavior at almost every 
# stage of the make:
#
#     BEFORE_PREBUILD: targets to build before installing headers for a subproject
#     AFTER_PREBUILD: targets to build after installing headers for a subproject
#     BEFORE_BUILD_RECURSION: targets to make before building subprojects
#     BEFORE_BUILD: targets to make before a build, but after subprojects
#     AFTER_BUILD: targets to make after a build
#
#     BEFORE_COPY_JAVA_CLASSES: targets to make prior to jar'ing the generated .class files
#     AFTER_COPY_JAVA_CLASSES: targets to make after jar'ing the generated .class files
#
#     BEFORE_INSTALL: targets to build before installing the product
#     AFTER_INSTALL: targets to build after installing the product
#     BEFORE_POSTINSTALL: targets to build before postinstalling every subproject
#     AFTER_POSTINSTALL: targts to build after postinstalling every subproject
#
#     BEFORE_INSTALLSRC: targets to build before installing source for a subproject
#     AFTER_INSTALLSRC: targets to build after installing source for a subproject
#

#
# Project dependency variables:
#     OTHER_PRODUCT_DEPENDS: Other dependencies of this project
#     OTHER_INITIAL_TARGETS: Built *before* building subprojects/bundles
#     OTHER_SOURCEFILES: Other source files maintained by .pre/postamble
#     OTHER_RESOURCES: Additional (non-localized) resources for this project, 
#         which can be generated
#     OTHER_GARBAGE: Additional files to be removed by `make clean' 
#

#
# Variables which control the file compilation:
#     OTHER_JAVATOOL_FLAGS: Pass flags to the 'javatool' compilation utility.
#         Flags which javatool doesn't recognize are passed down to the java compiler.
#     ARCHIVE_JAVA_CLASSES: Set to YES (the default) or NO.  Set it to NO to
#         turn off Java archiving (which is either jar, if available on your system, or zip).
#     JAVA_ARCHIVE_METHOD: Set to JAR to archive Java classes using Java archiving.  Set
#         to ZIP to archive them using zip compression.
#
#     JAVA_IS_SERVER_SIDE, JAVA_IS_CLIENT_SIDE: Set one, or both, of these flags to
#         NO to turn off building for client-side or server-side java.  Default is YES. 
#         Setting both to YES will build all files for both side (use this when building
#         java classes common to both client and server side)
JAVA_IS_SERVER_SIDE = YES
JAVA_IS_CLIENT_SIDE = NO
#
#     OTHER_CLASSPATH, OTHER_CLASSPATH_CLIENT: Use these to add additional Java classpaths for
#         the client and server sides (respectively) so generated classpath for Java in frameworks.
#         NOTE: Delimit your class path elements with $(CLASSPATH_DELIMITER) so they'll be
#         platform independent.
#     PREINDEX_FRAMEWORK: Set this to YES to suppress generation of a KeyValueCoding
#         index when installing frameworks (This index is used by WOB and IB to determine
#         keys available for an object).  Set to YES by default.
#

#
# Project-wide settings:
#     BUNDLE_PACKAGE_TYPE: The type of package being built.  Defaults to "APPL".
#     BUNDLE_SIGNATURE: The specific identifier of the built package.  Defaults to "webo".
#

#
# Set this to NO only if this framework and all of its subprojects have no
# .wo components.
HAS_WO_COMPONENTS = YES
#

#
# Variables used when installing the final product:
#     OTHER_INSTALL_DEPENDS: Targets to build before installation
#
#     INSTALL_AS_USER: owner of the intalled products (default is 'root')
#     INSTALL_AS_GROUP: group of the installed products (default is 'wheel')
#     INSTALL_PERMISSIONS: permissions of the installed product (default is 'o+rX')
#
#     INSTALLDIR_WEBSERVER: The installation Directory.  Typically, this value is
#         set to $(WEBSERVER_DOCROOT)/WebObjects/Frameworks (uncomment the line below
#         to use this default value).
#         Note: WEBSERVER_DOCROOT is computed from:
#             $(NEXT_ROOT)/$(SYSTEM_LIBRARY_DIR)/Frameworks/JavaWebObjects.framework/Resources/WebServerConfig.plist
#         which is created during installation.
#INSTALLDIR_WEBSERVER = $(WEBSERVER_DOCROOT)/WebObjects/Frameworks
#
#     DSTROOT: This variable's value is prefixed to the directory where a product
#         (application or framework) is installed. Developers wishing to install
#         their product into a location other than under $(NEXT_ROOT) should modify
#         the line below. An empty DSTROOT is legal; NEXT_ROOT defaults to "C:/Apple"
#         on Windows systems and "" on other systems.
DSTROOT = $(NEXT_ROOT)
#
]]></template>
	<template name="webobjects woframework makefile postamble" id="woframework.makefile.postamble" description="basic makefile.postamble" enabled="true"><![CDATA[
###############################################################################
#  Apple Makefile.postamble
#  Copyright 2001, Apple Computer, Inc.
#
#  Use this makefile, which is imported after all other makefiles, to
#  override attributes for a project's Makefile environment. This allows you  
#  to take advantage of the environment set up by the other Makefiles. 
#  You can also define custom rules at the end of this file.
#  
#  Each directory in a project tree (main project plus subprojects) should 
#  have its own Makefile.preamble and Makefile.postamble.
#
###############################################################################
# 
# Variables exported by the common makefiles that can be used in any
# customizations you make to the template below:
#
#     PRODUCTS: products to install.  All of these products will be placed in
#         the directory $(DSTROOT)$(INSTALLDIR)
#	  PRODUCT_ROOT: Name of the directory to which resources are copied.
#     GLOBAL_RESOURCE_DIR: The directory to which resources are copied.
#     LOCAL_RESOURCE_DIR: The directory to which localized resources are copied.
#	  DERIVED_SRC_DIR: Directory used for all other derived files
#
#	  NAME: name of application, bundle, subproject, palette, etc.
#	  LANGUAGES: Langage in which the project is written (default "English")
#	  GLOBAL_RESOURCES: Non-localized resources of project
#
#	  CLASSES: Class implementation files in project.
#	  SUBPROJECTS: Subprojects of this project
#	  OTHERSRCS: Other miscellaneous sources of this project
#	  OTHERLINKED: Source files not matching a standard source extention
#
#     SRCROOT: Base directory in which to place the new source files
#     SRCPATH: Relative path from SRCROOT to present subdirectory
#
#	  INSTALLDIR: Directory app will be installed into by 'install' target
#
#     EXECUTABLE_EXT: Executable extension for the platform (i.e. .exe on Windows)
#

#
# Versioning of frameworks:
#    DEPLOY_WITH_VERSION_NAME: This should be incremented as your API changes.
#        You should initially set it to 'A'.
#    COMPATIBILITY_PROJECT_VERSION: This should be incremented as your API grows.
#        Defaults to '1'.
#    CURRENT_PROJECT_VERSION: Defaults to using the "vers_string" hack.
#        Defaults to '1'.
#

#
# Put additional rules to extend the behavior of the standard Makefiles below.
# Include them in the dependency tree using the variables listed in the
# Makefile.preamble.
#
# You should avoid redefining things like "install" or "app", as they are
# owned by the top-level Makefile API and no context has been set up for where 
# derived files should go.
#
]]></template>
	<template name="webobjects woapplication custominfo.plist" id="woapplication.custominfo.plist" description="basic custominfo.plist" enabled="true"><![CDATA[
	{
     // ** Add your class paths here in the form of an array as follows:
     // ** NSJavaUserPath = ("/some/class/path", "/another/class/path");
     NSJavaUserPath = ();
}
]]></template>
	<template name="webobjects woframework custominfo.plist" id="woframework.custominfo.plist" description="basic custominfo.plist" enabled="true"><![CDATA[
	{
}
]]></template>
	<template name="eomodel index" id="eomodeld" variables="ADAPTOR_NAME" enabled="true"><![CDATA[{EOModelVersion = 2.1; adaptorName = ${ADAPTOR_NAME}; entities = (); }]]></template>
	<template name="eomodel diagram layout" id="diagram" enabled="true"><![CDATA[{}]]></template>
</templates>
